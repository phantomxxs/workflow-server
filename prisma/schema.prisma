generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// SEEDING ORDER (Updated: Removed TaskAssignment)
//    |___ Team
//    |___ Project
//    |___ ProjectTeam
//    |___ User
//    |___ Task
//    |___ Attachment
//    |___ Comment

model Team {
  id                   Int           @id @default(autoincrement())
  teamName             String
  productOwnerUserId   Int?
  projectManagerUserId Int?
  projectTeams         ProjectTeam[]
  users                User[]
}

model Project {
  id           Int           @id @default(autoincrement())
  name         String
  description  String
  startDate    DateTime?
  endDate      DateTime?
  tasks        Task[]
  projectTeams ProjectTeam[]
}

model ProjectTeam {
  id        Int     @id @default(autoincrement())
  teamId    Int
  projectId Int
  team      Team    @relation(fields: [teamId], references: [id])
  project   Project @relation(fields: [projectId], references: [id])
}

model User {
  userId            Int          @id @default(autoincrement())
  username          String       @unique
  cognitoId         String       @unique
  teamId            Int?
  profilePictureUrl String?
  attachments       Attachment[]
  comments          Comment[]
  authoredTasks     Task[]       @relation("TaskAuthor")
  assignedTasks     Task[]       @relation("TaskAssignee") // Many-to-many with Task
  team              Team?        @relation(fields: [teamId], references: [id])
}

model Task {
  id             Int       @id @default(autoincrement())
  title          String
  description    String?
  status         String?
  priority       String?
  tags           String?
  startDate      DateTime?
  endDate        DateTime?
  dueDate        DateTime?
  points         Int?
  projectId      Int?
  authorUserId   Int
  assignedUserId Int[]     // Array of user IDs for assignees

  project      Project?  @relation(fields: [projectId], references: [id])
  author       User      @relation("TaskAuthor", fields: [authorUserId], references: [userId])
  assignees    User[]    @relation("TaskAssignee") // Updated to array for many-to-many
  attachments  Attachment[]
  comments     Comment[]
}

model Attachment {
  id            Int    @id @default(autoincrement())
  fileUrl       String
  fileName      String?
  uploadedById  Int
  taskId        Int
  uploadedByUser User  @relation(fields: [uploadedById], references: [userId])
  connectedTask Task  @relation(fields: [taskId], references: [id])
}

model Comment {
  id             Int @id @default(autoincrement())
  content        String
  userId         Int
  taskId         Int
  commentedByUser User @relation(fields: [userId], references: [userId])
  connectedTask  Task @relation(fields: [taskId], references: [id])
}