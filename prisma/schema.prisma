// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// SEEDING ORDER
//    |___ Team
//    |___ Project
//    |___ ProjectTeam
//    |___ User
//    |___ Task
//    |___ Attachment
//    |___ Comment
//    |___ Task Assignment

// ARRANGE IN ORDER THEY WILL BE SEEDED

model Team {
  id                   Int           @id @default(autoincrement())
  teamName             String
  productOwnerUserId   Int?
  projectManagerUserId Int?
  projectTeams         ProjectTeam[]
  users                User[]
}

model Project {
  id           Int           @id @default(autoincrement())
  name         String
  description  String
  startDate    DateTime?
  endDate      DateTime?
  tasks        Task[]
  projectTeams ProjectTeam[]
}

model ProjectTeam {
  id        Int     @id @default(autoincrement())
  teamId    Int
  projectId Int
  team      Team    @relation(fields: [teamId], references: [id])
  project   Project @relation(fields: [projectId], references: [id])
}

model User {
  userId            Int              @id @default(autoincrement())
  username          String           @unique
  cognitoId         String           @unique
  teamId            Int?
  profilePictureUrl String?
  taskAssignment    TaskAssignment[]
  attachments       Attachment[]
  comments          Comment[]

  authoredTasks Task[] @relation("TaskAuthor")
  assignedTasks Task[] @relation("TaskAssignee")
  team          Team?  @relation(fields: [teamId], references: [id])
}

model Task {
  id             Int       @id @default(autoincrement())
  title          String
  description    String?
  status         String?
  priority       String?
  tags           String?
  startDate      DateTime?
  endDate        DateTime?
  dueDate        DateTime?
  points         Int?
  projectId      Int?
  authorUserId   Int
  assignedUserId Int

  project  Project? @relation(fields: [projectId], references: [id])
  author   User     @relation("TaskAuthor", fields: [authorUserId], references: [userId])
  assignee User     @relation("TaskAssignee", fields: [assignedUserId], references: [userId])

  taskAssignment TaskAssignment[]
  attachments    Attachment[]
  comments       Comment[]
}

model Attachment {
  id         Int    @id @default(autoincrement())
  fileUrl    String
  fileName   String?
  uploadedById Int
  taskId     Int

  uploadedByUser User @relation(fields: [uploadedById], references: [userId])
  connectedTask Task @relation(fields: [taskId], references: [id])
}

model Comment {
  id     Int @id @default(autoincrement())
  content  String
  userId Int
  taskId Int

  commentedByUser User @relation(fields: [userId], references: [userId])
  connectedTask Task @relation(fields: [taskId], references: [id])
}

model TaskAssignment {
  id     Int  @id @default(autoincrement())
  userId Int?
  taskId Int?

  User User? @relation(fields: [userId], references: [userId])
  Task Task? @relation(fields: [taskId], references: [id])
}
